"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from django.conf.locale.es import formats as es_formats


MODE = os.getenv('MODE')
EMPRESA = os.getenv('EMPRESA')

DEBUG = False
DEBUG_TOOLBAR = False
PTVSD_DEBUG = False
if os.getenv("DJANGO_DEBUG") == "True":  # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True
if os.getenv("DJANGO_DEBUG_TOOLBAR") == "True":   # Activar debug toolbar
    DEBUG_TOOLBAR = True
if os.getenv("DJANGO_PTVSD_DEBUG") == "True":  # Activa PTSVD
    PTVSD_DEBUG = True


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'XXXXX'

"""
    ESTAS VARIABLES NO SON DEL settings.py
    LAS PUEDES USAR EN EL PROYECTO PARA EL USO DE REDIS
"""
cache_enable = True  # Activa cache Redis
cache_life_seconds = (365 * 24 * 60 * 60)  # Limite de cache Redis en días


ALLOWED_HOSTS = [
    'localhost',
]

if MODE == "dev":
    ALLOWED_HOSTS = ['*']


MY_APPS = [
]

AUTOSTARTMIGRATE = MY_APPS

# Application definition
INSTALLED_APPS = [
    'django_extensions',
    'django_ptvsd',
    "werkzeug_debugger_runserver",
    'clear_cache',
    'admin_honeypot',
    'adminlte3',  # General use templates & template tags (should appear first)
    # 'adminlte3_theme',  # Optional: Django admin theme (must be before django.contrib.admin) NO FUNCIONA BIEN, BUG EN EL ORDERBY
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.humanize',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap4',
    'django_sb_admin',
    # 'jquery',  # De momento no lo necesito y es mejor no usarlo
] + MY_APPS


MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_currentuser.middleware.ThreadLocalUserMiddleware',
]


# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR + 'templates/'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


#  Database
#  https://docs.djangoproject.com/en/2.1/ref/settings/#databases
DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'ENGINE': os.environ.get('DB_ENGINE'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
    }
}
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
DATA_UPLOAD_MAX_NUMBER_FIELDS = None


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}
]


# Rutas
ROOT_URLCONF = 'project.urls'
WSGI_APPLICATION = 'project.wsgi.application'
STATICFILES_DIRS = ('/srv/project/assets/static',)
STATIC_ROOT = '/srv/static'
STATIC_URL = "/static/"
MEDIA_ROOT = '/srv/project/assets/media'
MEDIA_URL = "/media/"


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/
LANGUAGE_CODE = 'es'
TIME_ZONE = 'Europe/Madrid'
USE_I18N = True
USE_L10N = True
USE_TZ = False

es_formats.DATETIME_FORMAT = "j \d\e F \d\e Y H:i:s"


# Languages
ugettext = lambda s: s
LANGUAGES = (
    ('es', ugettext('Español')),
    ('ca', ugettext('Catalán')),
    ('pt', ugettext('Portugués')),
    ('fr', ugettext('Francés')),
)
LOCALE_PATHS = (
    BASE_DIR + '/locale',
)
USE_I18N = True
USE_L10N = True


# Smtp Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = ''
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
ADMIN_CONTACT_EMAIL = ''


# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'WARNING'),
            'propagate': False,
        },
    },
}

# Debug ToolBar
if DEBUG_TOOLBAR:
    def show_debug_toolbar(request):
        return True
    INSTALLED_APPS += ['debug_toolbar']
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.history.HistoryPanel',
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
        'debug_toolbar.panels.profiling.ProfilingPanel',
    ]
    import socket  # only if you haven't already imported this
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1"]


# Jupyter
SHELL_PLUS = "ipython"
SHELL_PLUS_PRINT_SQL = True
NOTEBOOK_ARGUMENTS = [
    "--ip",
    "0.0.0.0",
    "--port",
    "8888",
    "--allow-root",
    "--no-browser",
]
IPYTHON_ARGUMENTS = [
    "--ext",
    "django_extensions.management.notebook_extension",
    "--debug",
]
IPYTHON_KERNEL_DISPLAY_NAME = "Django Shell-Plus"
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true" # only use in development 


# Cache
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
        "KEY_PREFIX": "docker-xxxxx"
    }
}
